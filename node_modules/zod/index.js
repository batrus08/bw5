function makeString(){
  return { optionalFlag:false, optional(){ this.optionalFlag=true; return this; },
    parse(v,key,issues){ if(typeof v !== 'string') issues.push({ path:[key], message:'Expected string' }); }
  };
}
function makeNumber(){
  return { optionalFlag:false, int(){ return this; }, min(){ return this; }, nullable(){ this.nullable=true; return this; }, optional(){ this.optionalFlag=true; return this; },
    parse(v,key,issues){ if(typeof v !== 'number') issues.push({ path:[key], message:'Expected number' }); }
  };
}
function makeBoolean(){
  return { optionalFlag:false, optional(){ this.optionalFlag=true; return this; },
    parse(v,key,issues){ if(typeof v !== 'boolean') issues.push({ path:[key], message:'Expected boolean' }); }
  };
}
function object(shape){
  return {
    safeParse(input){
      const issues=[];
      for(const key of Object.keys(shape)){
        const schema = shape[key];
        const val = input[key];
        if(val === undefined){
          if(!schema.optionalFlag) issues.push({ path:[key], message:'Required' });
        } else if(val===null){
          if(!schema.nullable) issues.push({ path:[key], message:'Required' });
        } else {
          schema.parse(val,key,issues);
        }
      }
      if(issues.length>0) return { success:false, error:{ issues } };
      return { success:true, data: input };
    }
  };
}
const z = { string: makeString, number: makeNumber, boolean: makeBoolean, object };
module.exports = { z };
