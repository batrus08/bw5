generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  AVAILABLE
  RESERVED
  DISABLED
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PAY_ACK
  PAID
  DELIVERED
  REJECTED
  EXPIRED
  REFUND_REQUESTED
  REFUND_APPROVED
  REFUND_REJECTED
  AWAITING_PREAPPROVAL
  ON_HOLD_HELP
}

enum DeliveryMode {
  USERPASS
  INVITE_EMAIL
  CANVA_INVITE
}

enum EventKind {
  ORDER_CREATED
  ORDER_EXPIRED
  PAY_ACK
  ADMIN_CONFIRM
  ADMIN_REJECT
  REMINDER_SENT
  REFUND_REQUESTED
  REFUND_APPROVED
  REFUND_REJECTED
  DELIVERY_READY
  DELIVERY_NO_STOCK
  DELIVERY_RACE_FAIL
  DELIVERY_UNKNOWN_MODE
  INVITE_QUEUED
  INVITE_ADMIN_CONFIRMED
  INVITE_SENT_BY_ADMIN
  TELEGRAM_EDIT_FAIL
  WA_INVALID_SIGNATURE
  STOCK_ZERO_PAUSE
  STOCK_BACK_ONLINE
  BOT_TURNED_ON
  BOT_TURNED_OFF
  SHEET_SYNC_OK
  SHEET_SYNC_FAIL
  RATE_LIMITED
  DEAD_LETTER_STORED
  HELP_REQUESTED
  HELP_RESUMED
  HELP_CANCELLED
}

enum Actor {
  SYSTEM
  ADMIN
  CUSTOMER
}

enum TaskKind {
  INVITE_CHATGPT
  INVITE_CANVA
  RESEND_INVITE
  FOLLOWUP_PAYMENT
}

enum TaskStatus {
  OPEN
  DONE
  CANCELLED
}

enum Channel {
  TELEGRAM
  WHATSAPP
  N8N
}

enum OtpType {
  MANUAL_AFTER_DELIVERY
  TOTP_SINGLE_USE
}

enum OtpPolicy {
  NONE
  MANUAL_AFTER_DELIVERY
  TOTP_SINGLE_USE
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  AWAITING_REFUND
  REFUNDED
}

enum PreapprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model products {
  code            String       @id
  name            String
  approval_required Boolean     @default(false)
  default_tnc_key   String?
  default_qris_key  String?
  default_mode      DeliveryMode?
  default_requires_email Boolean @default(false)
  default_otp_policy OtpPolicy  @default(NONE)
  sorting_index     Int?        @default(10)
  category          String?
  is_active       Boolean      @default(true)
  daily_limit     Int?
  sk_text         String?

  accounts   accounts[]
  variants   product_variants[]
  orders     orders[]

  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  stockalerts stockalerts[]
}

model product_variants {
  variant_id    String   @id @default(uuid())
  product_id    String
  code          String   @unique
  title         String?
  duration_days Int
  price_cents   Int
  delivery_mode DeliveryMode @default(USERPASS)
  requires_email Boolean @default(false)
  otp_policy    OtpPolicy @default(NONE)
  tnc_key       String?
  qris_key      String?
  stock_cached  Int?
  active        Boolean  @default(true)
  accounts      accounts[]
  orders        orders[]
  thresholds    thresholds?
  updated_at    DateTime @updatedAt
  product products @relation(fields: [product_id], references: [code], onUpdate: Cascade, onDelete: Cascade)

  @@index([product_id, active])
}

model accounts {
  id               Int           @id @default(autoincrement())
  product_code     String
  variant_id       String        @db.Uuid
  account_group_id String?
  profile_index    Int?
  profile_name     String?
  username         String?
  password         String?
  profile_pin      String?
  totp_secret      String?
  invite_channel   String?
  status           AccountStatus @default(AVAILABLE)
  tnc_blob         String?
  notes            String?
  max_usage        Int           @default(1)
  used_count       Int           @default(0)
  fifo_order       BigInt
  natural_key      String        @unique

  product products          @relation(fields: [product_code], references: [code], onUpdate: Cascade, onDelete: Restrict)
  variant product_variants  @relation(fields: [variant_id], references: [variant_id], onUpdate: Cascade, onDelete: Restrict)
  orders  orders[]          @relation("OrderAccount")

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([product_code, status])
  @@index([variant_id, status])
  @@index([status])
  @@index([fifo_order])
}

model orders {
  id              BigInt      @id @default(autoincrement())
  invoice         String      @unique
  buyer_phone     String
  product_code    String
  variant_id      String?     @db.Uuid
  qty             Int         @default(1)
  amount_cents    Int
  status          OrderStatus @default(PENDING_PAYMENT)
  email           String?
  email_for_invite String?
  qris_key        String?
  account_id      Int?
  pay_ack_at      DateTime?
  tnc_ack_at      DateTime?
  fulfilled_at    DateTime?
  expires_at      DateTime?
  proof_id        String?
  proof_mime      String?
  synced_to_sheet Boolean     @default(false)
  metadata        Json?
  delivery_mode   DeliveryMode?
  delivery_payload_json Json?
  idempotency_key String?     @unique

  product     products             @relation(fields: [product_code], references: [code], onUpdate: Cascade, onDelete: Restrict)
  variant     product_variants?    @relation(fields: [variant_id], references: [variant_id], onUpdate: Cascade, onDelete: SetNull)
  account     accounts?            @relation("OrderAccount", fields: [account_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  events      events[]
  tasks       tasks[]
  preapproval preapprovalrequests?

  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  warrantyclaims warrantyclaims?

  @@index([status])
  @@index([product_code, created_at])
  @@index([buyer_phone])
}

model preapprovalrequests {
  id       Int               @id @default(autoincrement())
  order_id BigInt            @unique
  status   PreapprovalStatus @default(PENDING)
  notes    String?

  order orders @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model warrantyclaims {
  id           BigInt      @id @default(autoincrement())
  order_id     BigInt      @unique
  status       ClaimStatus @default(PENDING)
  reason       String?
  refund_cents Int?
  ewallet      String?
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt

  order orders @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model stockalerts {
  id               String    @id @default(cuid())
  product_code     String
  last_status      String
  last_notified_at DateTime?
  product          products  @relation(fields: [product_code], references: [code], onUpdate: Cascade, onDelete: Cascade)

  @@unique([product_code])
}

model thresholds {
  variant_id        String   @id @db.Uuid
  low_stock_units   Int?
  low_stock_capacity Int?
  variant           product_variants @relation(fields: [variant_id], references: [variant_id], onUpdate: Cascade, onDelete: Cascade)
}

model events {
  id              BigInt    @id @default(autoincrement())
  order_id        BigInt?
  kind            EventKind
  actor           Actor     @default(SYSTEM)
  source          String?
  meta            Json?
  idempotency_key String?   @unique
  created_at      DateTime  @default(now())

  order orders? @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: SetNull)

  @@index([order_id, created_at])
  @@index([kind])
  @@index([idempotency_key])
}

model tasks {
  id         BigInt     @id @default(autoincrement())
  order_id   BigInt
  kind       TaskKind
  status     TaskStatus @default(OPEN)
  due_at     DateTime?
  note       String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt

  order orders @relation(fields: [order_id], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@index([status, due_at])
}

model settings {
  key        String   @id
  value      String?
  updated_at DateTime @default(now()) @updatedAt
}

model otptokens {
  id         String   @id
  order_id   BigInt
  type       OtpType
  code_hash  String?
  expires_at DateTime
  used       Boolean  @default(false)
  used_count Int      @default(0)
  one_time_limit Int  @default(1)
  created_at DateTime @default(now())

  @@index([order_id, expires_at])
}

model deadletters {
  id           BigInt   @id @default(autoincrement())
  channel      Channel
  endpoint     String?
  payload      Json
  error        String?
  retry_count  Int      @default(0)
  created_at   DateTime @default(now())
  last_attempt DateTime @default(now())
}

model ratelogs {
  id  BigInt   @id @default(autoincrement())
  key String
  ts  DateTime @default(now())

  @@index([key, ts])
}

model terms {
  key      String @id
  title    String
  body_md  String
  version  Int    @default(1)
}

model qris_assets {
  key       String @id
  name      String
  image_url String
  active    Boolean @default(true)
}

model WhatsappState {
  phone      String   @id
  state_json Json
  updated_at DateTime @updatedAt
}
